const Papa = require('papaparse');
const fs = require('fs');
const path = require('path');
const { GoogleGenerativeAI } = require('@google/generative-ai');
const axios = require('axios');
const express = require('express');
const { Console } = require('console');

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(express.json());

// Function to parse the CSV file
const parseCSV = (filePath) => {
  const fileContent = fs.readFileSync(filePath, 'utf8');
  return Papa.parse(fileContent, { header: true }).data;
};
const fetchMostRecentDate = async () => {
  const url = 'https://statsapi.mlb.com/api/v1'; // No date range to get all games
  try {
    const response = await axios.get(url);
    const games = response.data;
    console.log('Fetched games:', games);
    if (games.length > 0) {
      // Get the most recent game date
      const recentGameDate = games.reduce((latest, game) => {
        const gameDate = new Date(game.gameDate);
        return gameDate > latest ? gameDate : latest;
      }, new Date(0)); // Starting from a very old date
      return recentGameDate.toISOString().split('T')[0]; // Return the most recent date as YYYY-MM-DD
    } else {
      console.log('No games found.');
      return null;
    }
  } catch (error) {
    console.error('Error fetching most recent date:', error);
    return null;
  }
};
// Function to interact with Gemini API and generate a single trivia question
const generateTriviaQuestion = async (highlightData) => {
  const apiKey = 'AIzaSyB02haLReTYIP13UjQ8IG1874NAzm7RS_k'; // Replace with your Gemini API key
  const genAI = new GoogleGenerativeAI(apiKey);
  const model = genAI.getGenerativeModel({ model: 'gemini-1.5-flash' });

  const prompt = `Generate a simple trivia question based on the following MLB highlight data: ${JSON.stringify(highlightData)}. Include answer choices (A, B, C, D).`;

  try {
    const result = await model.generateContent(prompt);
    const triviaData = result.response.text();
    return triviaData;
  } catch (error) {
    console.error('Error generating trivia question:', error);
    return null;
  }
};

// Function to fetch games data for the past 5 days and current games

const fetchMostRecentGames = async () => {
  let currentDate = new Date(); // Start from today
  let formattedDate = currentDate.toISOString().split('T')[0]; // Format as YYYY-MM-DD
  let gamesFound = false;
  let attempts = 0; // To prevent infinite loops
  let mostRecentDate = null;
  let mappedGames = [];

  while (!gamesFound && attempts < 365) { // Limit to 365 days max
    const url = `https://statsapi.mlb.com/api/v1/schedule?sportId=1&date=${formattedDate}`;
    console.log(`Checking games for: ${formattedDate}`);

    try {
      const response = await axios.get(url);
      console.log('API Response for babatunde:', response.data.games);
      if (response.data.dates && response.data.dates.length > 0) {
        const games = response.data.dates.flatMap((date) => date.games);

        if (games.length > 0) {
          gamesFound = true;
          mostRecentDate = formattedDate;
          mappedGames = games.map((game) => ({
            gamePk: game.gamePk,
            gameDate: game.gameDate,
            homeTeam: game.teams.home.team.name,
            awayTeam: game.teams.away.team.name,
            status: game.status.detailedState,
            awayTeamId: game.teams.away.team.id,
            homeTeamId: game.teams.home.team.id,
            venue: game.venue.name,
            videoLink: game.content?.link || "No video available",
          }));
        }
      }
    } catch (error) {
      console.error(`Error fetching data for ${formattedDate}:`, error.message);
    }

    if (!gamesFound) {
      // Go back one day and try again
      currentDate.setDate(currentDate.getDate() - 1);
      formattedDate = currentDate.toISOString().split('T')[0];
      attempts++;
    }
  }

  if (!mostRecentDate) {
    console.log("No recent games found within the past year.");
    return [];
  }

  console.log(`Most recent games found on: ${mostRecentDate}`);
  console.log('Fetched games:', mappedGames);
  return mappedGames;
};

//fetchMostRecentGames();

const fetchVideoContent = async () => {
  const games = await fetchMostRecentGames(); // Fetch games

  if (!games || games.length === 0) {
    console.log('No games available to fetch video content for.');
    return;
  }

  // Only get the first game from the fetched list (the most recent game)
  const game = games[0]; // Since fetchMostRecentGames returns a list, take the first game
  const gamePk = game.gamePk; // Extract gamePk from the most recent game
  console.log(`Fetching video content for gamePk: ${gamePk}`);


  //const videoUrl = `https://statsapi.mlb.com/api/v1/game/775296/content`;  // Dynamically use the gamePk

  const videoUrl = `https://statsapi.mlb.com/api/v1/game/${gamePk}/content`;  // Dynamically use the gamePk


  try {
    const response = await axios.get(videoUrl);
    // this gave long video const media = response.data.media.epgAlternate[0].items[1];
    // this gave a long videos the first index is longer than second const media = response.data.media.epgAlternate[1].items[0];
    const media = response.data.media.epgAlternate[1].items[0].playbacks[5];
    //const featuredVideoId = media.featuredMedia?.id || null;  // Main highlight video
    //const otherHighlights = response.data.highlights?.highlights?.items || []; // Other highlight clips

    console.log('API Response for video content:',media);
    if (response.data && response.data) {
      //console.log('Video content fetched:', media);
      return media; // Return media content if available
    } else {
      console.log('No media content available for this game.');
      return null;
    }
  } catch (error) {
    console.error('Error fetching video content:', error);
    return null;
  }
};
fetchVideoContent()



// Function to fetch detailed player stats for a specific game
const fetchPlayerStats = async (gamePk) => {
  const url = `https://statsapi.mlb.com/api/v1/game/${gamePk}/boxscore`;

  try {
    const response = await axios.get(url);
    console.log('API Response for top performer test:', response.data.topPerformers);
    // Check if topPerformers data exists in the response
    if (response.data && response.data.topPerformers) {
      const performers = response.data.topPerformers.map((performer) => {
        const playerName = performer.player.person ? performer.player.person.fullName : 'Unknown Player';
        const jerseyNumber = performer.player.jerseyNumber || 'No Jersey Number';
        const position = performer.player.position ? performer.player.position.name : 'Unknown Position';
        const battingOrder = performer.player.stats?.batting || 'No Batting Order';
        const pitchingOrder = performer.player.stats?.pitching || 'No Pitching Order';
        const fieldingOrder = performer.player.stats?.fielding || 'No Fielding Order';
        const seasonStats = performer.player.seasonStats || 'No Season Stats';
        const teamId = performer.player.parentTeamId || null;

        return {
          name: playerName,
          type: performer.type,
          gameScore: performer.gameScore,
          hittingGameScore: performer.hittingGameScore,
          jerseyNumber: jerseyNumber,
          position: position,
          stats: performer.player.stats,
          battingOrder,
          pitchingOrder,
          fieldingOrder,
          playerId: performer.player.person?.id || null, // Ensure playerId is extracted
          teamId: teamId, // Ensure teamId is extracted
          
        };
      });
      //console.log('Top Performers:', performers);
      return performers;
    } else {
      console.log('Top Performers data is not available.');
      return [];
    }
  } catch (error) {
    console.error('Error fetching player stats:', error);
    return null;
  }
};

// Function to fetch historical records for a specific metric
const fetchHistoricalRecords = async (metric, playerId, teamId, option) => {
  //let url;
  console.log()
  const url = `https://statsapi.mlb.com/api/v1/teams/111/stats?stats=season&group=hitting,pitching,fielding`;    
  const response = await axios.get(url);
  console.log('teammmm stats Response:', response.data.stats[0].splits[0]);
  return response.data;
}
  /*switch (option) {
    case 'player':
      url = `https://statsapi.mlb.com/api/v1/people/${playerId}/stats?stats=career`;
      break;
    case 'team':
      const currentYear = new Date().getFullYear(); // Get the current year
      url = `https://statsapi.mlb.com/api/v1/teams/${teamId}/stats?stats=season&season=${currentYear}`;
      break;
    case 'mlb':
      url = `https://statsapi.mlb.com/api/v1/stats?stats=career&group=hitting&playerPool=ALL`;
      break;
    default:
      return null;
  }

  console.log(`Fetching historical records from URL: ${url}`);

  try {
    const response = await axios.get(url);
    //console.log('API Response:', response.data); // Log the response for debugging

    const stats = response.data.stats[0]?.splits || [];
    console.log('Stats:', stats); // Log the stats array

    if (stats.length === 0) {
      console.log('No stats found for the given option.');
      return null;
    }

    // Find the best record for the metric
    const bestRecord = stats.reduce((best, record) => {
      return record.stat[metric] > best.stat[metric] ? record : best;
    }, { stat: { [metric]: 0 } });

    // Check if the metric exists in the best record
    if (!bestRecord.stat[metric]) {
      console.log(`Metric "${metric}" not found in the stats.`);
      return null;
    }

    return bestRecord;
  } catch (error) {
    console.error('Error fetching historical records:', error);
    return null;
  }
};*/

// Function to compare stats and generate trivia questions
const compareStats = async (playerStats, option) => {
  const comparisons = [];

  //console.log(`Comparing stats for option: ${option}`);
  //console.log(`Player ID: ${playerStats.playerId}, Team ID: ${playerStats.teamId}`);

  // Skip if playerId or teamId is missing
  if (option === 'player' && !playerStats.playerId) {
    console.log(`Player ID is missing for ${playerStats.name}. Skipping comparison.`);
    return comparisons;
  }
  if (option === 'team' && !playerStats.teamId) {
    console.log(`Team ID is missing for ${playerStats.name}. Skipping comparison.`);
    return comparisons;
  }

  // Identify the key metric for the player
  const keyMetric = Object.keys(playerStats.stats).reduce((a, b) =>
    playerStats.stats[a] > playerStats.stats[b] ? a : b
  );

  if (!keyMetric || !playerStats.stats[keyMetric]) {
    console.log(`No valid metric found for player: ${playerStats.name}`);
    return comparisons;
  }

  const metricValue = playerStats.stats[keyMetric];

  // Fetch historical records based on the selected option
  const historicalRecord = await fetchHistoricalRecords(
    keyMetric,
    playerStats.playerId,
    playerStats.teamId,
    option
  );

  if (historicalRecord) {
    comparisons.push({
      metric: keyMetric,
      current: metricValue,
      historicalRecord: historicalRecord.stat[keyMetric],
      historicalRecordHolder: historicalRecord.player?.fullName || historicalRecord.team?.name || 'Unknown',
      difference: metricValue - historicalRecord.stat[keyMetric],
    });

    // Generate trivia question using Gemini
    const triviaPrompt = `Generate a trivia question about ${playerStats.name}'s ${keyMetric} in comparison to ${option === 'player' ? 'their personal best' : option === 'team' ? 'their team\'s historical record' : 'MLB\'s all-time record'}.`;
    const triviaQuestion = await generateTriviaQuestion(triviaPrompt);
    comparisons.push({ triviaQuestion });
  }

  return comparisons;
};

// Define an endpoint to compare stats for the most recent game
app.get('/api/compare-stats', async (req, res) => {
  try {
    const { option } = req.query; // 'player', 'team', or 'mlb'
    if (!['player', 'team', 'mlb'].includes(option)) {
      return res.status(400).json({ error: 'Invalid option. Choose "player", "team", or "mlb".' });
    }

    const gamesData = await fetchGamesData();
    if (!gamesData || gamesData.length === 0) {
      return res.status(404).json({ error: 'No recent games found' });
    }

    const mostRecentGame = gamesData[0];
    console.log('Most Recent Game:', mostRecentGame);
    const topPerformers = await fetchPlayerStats(mostRecentGame.gamePk);

    if (!topPerformers) {
      return res.status(500).json({ error: 'Failed to fetch top performers' });
    }

    // Compare stats for each top performer based on the selected option
    const comparisons = [];
    for (const performer of topPerformers) {
      const playerComparisons = await compareStats(performer, option);
      comparisons.push(...playerComparisons);
    }

    res.json({ comparisons });
  } catch (error) {
    console.error('Error handling /api/compare-stats request:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

app.get('/videos', async (req, res) => {
  try {
    const videoData = await fetchVideoContent();
    if (videoData && videoData.url) {
      res.json([{ url: videoData.url }]); // Send the video URL as a JSON array
    } else {
      res.status(404).json({ error: 'No video content available.' });
    }
  } catch (error) {
    console.error('Error fetching video content:', error);
    res.status(500).json({ error: 'Error fetching video content.' });
  }
});

// Start the Express server
app.listen(PORT, () => {
  console.log(`Server is running on http://localhost:${PORT}`);
});